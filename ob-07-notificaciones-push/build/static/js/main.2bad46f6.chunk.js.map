{"version":3,"sources":["App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["withServiceWorkerUpdater","props","newServiceWorkerDetected","onLoadNewServiceWorkerAccept","React","useState","newItem","setNewItem","items","setItems","addNewItem","className","style","backgroundColor","marginBottom","padding","onClick","fontSize","type","onKeyPress","e","key","onChange","target","value","map","item","isLocalhost","Boolean","window","location","hostname","match","vapidKeys","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","pushManager","getSubscription","sub","a","subscribe","userVisibleOnly","applicationServerKey","pushSubscription","axios","post","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","onServiceWorkerUpdate"],"mappings":"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","file":"static/js/main.2bad46f6.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { withServiceWorkerUpdater } from '@3m1/service-worker-updater';\n\n\nconst App = (props) => {\n  const { newServiceWorkerDetected, onLoadNewServiceWorkerAccept } = props;\n\n  const [newItem, setNewItem] = React.useState(\"\");\n  const [items, setItems] = React.useState([]);\n\n  const addNewItem = () => {\n    setItems([...items, newItem]);\n    setNewItem(\"\");\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>** Proyecto PWA - Lista de la compra **</h1>\n        {newServiceWorkerDetected && <div style={{ backgroundColor: 'red', marginBottom: 20, padding: 20 }}>\n          <h3>¡Nueva actualización! ¿Quieres actualizar?</h3>\n          <button onClick={onLoadNewServiceWorkerAccept} style={{ padding: 15 }}>¡Actualizar!</button>\n        </div>}\n        <input style={{ fontSize: 24 }} type=\"text\" onKeyPress={e => e.key === 'Enter' && addNewItem()} onChange={e => setNewItem(e.target.value)} value={newItem} />\n        <button style={{ fontSize: 24 }} onClick={addNewItem}>Añadir</button>\n        <ul>\n          {items.map((item, key) => <li key={key}>{item}</li>)}\n        </ul>\n      </header>\n    </div>\n  );\n}\n\nexport default withServiceWorkerUpdater(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nimport axios from \"axios\";\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nconst vapidKeys = {\n  publicKey: \"BJ7oPFz6nH60tZYqw0ccdh4h28Bf6-Yujvij7BgMv0kRlRTSCkL1oPFBKQISRtS0uNRR249nWK4I-GfEPdvhCtc\",\n  privateKey: \"5wGMH_OOjeFL03YbFC7SP6fJulbTfoEuxuNW37EURag\"\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.pushManager.getSubscription()\n        .then(async sub => {\n          const pushSubscription = await registration.pushManager.subscribe({\n            userVisibleOnly: true,\n            applicationServerKey: vapidKeys.publicKey\n          });\n          // Aquí se lo enviamos al servidor\n          await axios.post('http://localhost:8000/subscription', {\n            pushSubscription\n          });\n        })\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport { onServiceWorkerUpdate } from '@3m1/service-worker-updater'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register({\n  onUpdate: onServiceWorkerUpdate\n});\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}